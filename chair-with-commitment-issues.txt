;**** Timer ****

TSCR1 EQU $46

TSCR2 EQU $4D

TIOS  EQU $40

TCTL1 EQU $48

TCTL2 EQU $49

TFLG1 EQU $4E

TIE   EQU $4C

TSCNT EQU $44

TC4	  EQU $58

TC1	  EQU $52

;***************



;*** PORTS ****

DDRA  EQU $02

PORTA EQU $00

PORTB EQU $01

DDRB  EQU $03

PORTM EQU $0250

DDRM  EQU $0252

;**************



;*** ADC Unit ***

ATDCTL2	EQU $122

ATDCTL4 EQU $124

ATDCTL5	EQU $125

ATDSTAT0 EQU $126

ATD1DR1H EQU $132

ATD1DR1L EQU $133

;****************



MS_CONST equ $FFFF



; Include .hc12 directive, in case you need MUL

.hc12



	ORG	$1000

MinSpot  ds 1 ;  hunched forward

MaxSpot  ds 1 ;  right at the back of the chair



	ORG	$400

	LDS #$4000

	; Set MinSpot and MaxSpot values

	LDAA #!80

	STAA MinSpot

	LDAA #!180

	STAA MaxSpot

	

	; Initialize A/D

	LDAA #%11000000  ; initialize ADTCTL2 -- power up, set fast flag clearing

	STAA $122 ; which is ADTCTL2

	; wait a bit for thing to boot up

	LDY #!5

	JSR Delay

	LDAA #%11100101 ; initialize ADTCTL4 -- 8 bit res, 16 A/D clock, and PRS to 00101

	STAA $124 ; which is ADTCTL4

	JSR InitLCD; Initialize LCD

	

	; Check temp "seat" sensor for "person"

Heat	LDAA #$C1	

	STAA ATDCTL5

	BRCLR ATDSTAT0,$80,*

	LDAB ATD1DR1L

	CMPB #!200

	BLS Heat

	;Timer

	LDAA #$90

	STAA TSCR1

	LDAA #$04

	STAA TSCR2

	LDAA #$10

	STAA TIOS

	LDAA #$01

	STAA TCTL1

	LDD TSCNT

	ADDD #$FF

	STD TC4

	BRA SitTime



; While NOT standing up, check posture - if timer is up, print STAND UP until "person" is up

SitTime	BRCLR TFLG1,$10,Posture

LOOP	JSR PrintStandUp

	LDAA #$C1

	STAA ATDCTL5

	BRCLR ATDSTAT0,$80,*

	LDAB ATD1DR1L

	CMPB #!200

	BLS Heat

	BRA LOOP

	

	; Check "posture"

Posture	LDAB #%11000000 ; end with 000 for ch0 (potentiometer)

	STAB ATDCTL5 

	BRCLR ATDSTAT0,%10000000,* ; wait for bit 7 on ADTSTAT0 ($126) to detect

	LDAB ATD1DR1L

	CMPB MinSpot

	BLS PrintLeanBack

	CMPB MaxSpot

	BHI PrintLeanForwards

	BRA PrintBlank

	

Delay	DEY

	BNE Delay

	RTS



PrintLeanBack:

	LDX #LeanBack ; Load String Pointer

	PSHX ; Push array pointer

	JSR SENDSTR

	LEAS 2,SP  ; Clean up the mess.

	BRA SitTime



PrintLeanForwards:

	LDX #LeanForwards ; Load String Pointer

	PSHX ; Push array pointer

	JSR SENDSTR

	LEAS 2,SP  ; Clean up the mess.

	BRA SitTime



PrintStandUp:

	LDX #StandUp ; Load String Pointer

	PSHX ; Push array pointer

	JSR SENDSTR

	LEAS 2,SP  ; Clean up the mess.

	RTS  	

		

PrintBlank:

	LDX #Blank ; Clear display using Blank String (pointer)

	PSHX

	JSR SENDSTR

	LEAS 2,SP ; Clean up the mess

	BRA SitTime



SENDSTR:

LDY 2,SP 

	LDAA #1

	PSHA

	PSHA

	JSR SendWithDelay

	PULA

	PULA	  

LOOPSTR:	

LDAA 1,Y+ ; Get the current value and THEN increment the pointer

	BNE DO_NEXT; We must count each non-zero value

	RTS	  ; If we get here, we found the null-terminator.

DO_NEXT: 

PSHA

	LDAA #1

	PSHA

	BSET PORTM,$04

	JSR SendWithDelay

	BCLR PORTM,$04

	PULA

	PULA

	BRA LOOPSTR

	

InitLCD	LDAA #$FF ; Set port A to output for now

	STAA DDRA

       	LDAA #$1C ; Set port M bits 4,3,2

	STAA DDRM

	LDAA #$30	; We need to send this command a bunch of times

	PSHA

	LDAA #5

	PSHA

	JSR SendWithDelay

	PULA

	LDAA #1

	PSHA

	JSR SendWithDelay

	JSR SendWithDelay

	JSR SendWithDelay

	PULA

	PULA

	LDAA #$08

	PSHA

	LDAA #1

	PSHA

	JSR SendWithDelay

	PULA

	PULA

	LDAA #1

	PSHA

	PSHA

	JSR SendWithDelay

	PULA

	PULA

	LDAA #6

	PSHA

	LDAA #1

	PSHA

	JSR SendWithDelay

	PULA

	PULA

	LDAA #$0E

	PSHA

	LDAA #1

	PSHA

	JSR SendWithDelay

	PULA

	PULA

	RTS



SendWithDelay:  

	TSX

	LDAA 3,X

	STAA PORTA

	BSET PORTM,$10	 ; Turn on bit 4

	JSR Delay1MS

	BCLR PORTM,$10	 ; Turn off bit 4

	TSX

	LDAA 2,X

	PSHA

	CLRA

	PSHA

	JSR DelayPrint

	PULA

	PULA

	RTS



Delay1MS:	

	PSHX

	LDX #MS_CONST

ms_loop:

CPX #0

	BEQ ms_done

	DEX

	BRA ms_loop

ms_done: 

PULX

	RTS



DelayPrint:	

	PSHX

	LDX 4,SP

delay_loop:	

	CPX #0

	BEQ delay_done

	JSR Delay1MS

	DEX

	BRA delay_loop

delay_done:	

	PULX

	RTS



LeanForwards: DB 'L','e','a','n',' ','F','o','r','w','a','r','d','s',0

LeanBack: DB  'L','e','a','n',' ','B','a','c','k',0

StandUp: DB  'S','t','a','n','d',' ','U','p',0

Blank: DB '',0
